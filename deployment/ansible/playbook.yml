# deployment/ansible/playbook.yml
---
- name: Deploy Mini-Quant Application
  hosts: webservers
  become: yes
  vars:
    app_name: mini-quant
    app_user: ubuntu
    app_dir: /home/{{ app_user }}/{{ app_name }}
    backend_port: 8000
    frontend_port: 3000
    domain_name: "{{ ansible_host }}"  # Will use IP if no domain
    
  tasks:
    # System Updates and Dependencies
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      
    - name: Install system dependencies
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - nginx
          - git
          - curl
          - build-essential
          - postgresql
          - postgresql-contrib
          - libpq-dev
        state: present
        
    # Node.js Installation
    - name: Add NodeSource APT repository
      shell: curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
      args:
        creates: /etc/apt/sources.list.d/nodesource.list
        
    - name: Install Node.js
      apt:
        name: nodejs
        state: present
        update_cache: yes
        
    # Application User Setup
    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        
    # Clone or Update Application Code
    - name: Clone application repository
      git:
        repo: "https://github.com/{{ github_username }}/mini-quant.git"
        dest: "{{ app_dir }}"
        force: yes
      become_user: "{{ app_user }}"
      when: github_username is defined
      
    # Backend Setup
    - name: Create Python virtual environment
      command: python3 -m venv {{ app_dir }}/backend/venv
      become_user: "{{ app_user }}"
      args:
        creates: "{{ app_dir }}/backend/venv"
        
    - name: Install Python dependencies
      pip:
        requirements: "{{ app_dir }}/backend/requirements.txt"
        virtualenv: "{{ app_dir }}/backend/venv"
      become_user: "{{ app_user }}"
      
    # PostgreSQL Database Setup
    - name: Start and enable PostgreSQL
      systemd:
        name: postgresql
        state: started
        enabled: yes
        
    - name: Create database user
      postgresql_user:
        name: "{{ app_name }}"
        password: "{{ db_password | default('changeme123') }}"
        role_attr_flags: CREATEDB
      become_user: postgres
      
    - name: Create database
      postgresql_db:
        name: "{{ app_name }}"
        owner: "{{ app_name }}"
      become_user: postgres
      
    # Frontend Build
    - name: Install frontend dependencies
      npm:
        path: "{{ app_dir }}/frontend"
      become_user: "{{ app_user }}"
      
    - name: Build frontend application
      command: npm run build
      args:
        chdir: "{{ app_dir }}/frontend"
      become_user: "{{ app_user }}"
      environment:
        REACT_APP_API_URL: "http://{{ domain_name }}:{{ backend_port }}"
        
    # Systemd Service Files
    - name: Create backend systemd service
      template:
        src: backend.service.j2
        dest: /etc/systemd/system/{{ app_name }}-backend.service
      notify: reload systemd
      
    # Nginx Configuration
    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: reload nginx
      
    - name: Create nginx configuration
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ app_name }}
      notify: reload nginx
      
    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/{{ app_name }}
        dest: /etc/nginx/sites-enabled/{{ app_name }}
        state: link
      notify: reload nginx
      
    # SSL Certificate (Optional - Let's Encrypt)
    - name: Install certbot for SSL
      apt:
        name:
          - certbot
          - python3-certbot-nginx
        state: present
      when: enable_ssl | default(false)
      
    - name: Generate SSL certificate
      command: certbot --nginx -d {{ domain_name }} --non-interactive --agree-tos --email {{ ssl_email }}
      when: enable_ssl | default(false) and domain_name != ansible_host
      
    # Firewall Configuration
    - name: Install ufw
      apt:
        name: ufw
        state: present
        
    - name: Configure ufw defaults
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      with_items:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }
        
    - name: Configure ufw rules
      ufw:
        rule: allow
        port: "{{ item }}"
      with_items:
        - "22"
        - "80"
        - "443"
        - "{{ backend_port }}"
        
    - name: Enable ufw
      ufw:
        state: enabled
        
    # Start Services
    - name: Start and enable backend service
      systemd:
        name: "{{ app_name }}-backend"
        state: started
        enabled: yes
        daemon_reload: yes
        
    - name: Start and enable nginx
      systemd:
        name: nginx
        state: started
        enabled: yes
        
  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes
        
    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded